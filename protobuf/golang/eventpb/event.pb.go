// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: event.proto

package eventpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventName int32

const (
	EventName_EVENT_NAME_UNSPECIFIED        EventName = 0
	EventName_PULL_REQUEST_OPENED           EventName = 1
	EventName_PULL_REQUEST_CLOSED           EventName = 2
	EventName_PULL_REQUEST_REVIEW_SUBMITTED EventName = 3
	EventName_ISSUE_OPENED                  EventName = 4
	EventName_ISSUE_CLOSED                  EventName = 5
	EventName_ISSUE_COMMENTED               EventName = 6
	EventName_COMMIT_PUSHED                 EventName = 7
	EventName_REPOSITORY_FORKED             EventName = 8
)

// Enum value maps for EventName.
var (
	EventName_name = map[int32]string{
		0: "EVENT_NAME_UNSPECIFIED",
		1: "PULL_REQUEST_OPENED",
		2: "PULL_REQUEST_CLOSED",
		3: "PULL_REQUEST_REVIEW_SUBMITTED",
		4: "ISSUE_OPENED",
		5: "ISSUE_CLOSED",
		6: "ISSUE_COMMENTED",
		7: "COMMIT_PUSHED",
		8: "REPOSITORY_FORKED",
	}
	EventName_value = map[string]int32{
		"EVENT_NAME_UNSPECIFIED":        0,
		"PULL_REQUEST_OPENED":           1,
		"PULL_REQUEST_CLOSED":           2,
		"PULL_REQUEST_REVIEW_SUBMITTED": 3,
		"ISSUE_OPENED":                  4,
		"ISSUE_CLOSED":                  5,
		"ISSUE_COMMENTED":               6,
		"COMMIT_PUSHED":                 7,
		"REPOSITORY_FORKED":             8,
	}
)

func (x EventName) Enum() *EventName {
	p := new(EventName)
	*p = x
	return p
}

func (x EventName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventName) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[0].Descriptor()
}

func (EventName) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[0]
}

func (x EventName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventName.Descriptor instead.
func (EventName) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

type ReviewState int32

const (
	ReviewState_REVIEW_STATE_UNSPECIFIED ReviewState = 0
	ReviewState_APPROVED                 ReviewState = 1
	ReviewState_CHANGES_REQUESTED        ReviewState = 2
	ReviewState_COMMENTED                ReviewState = 3
)

// Enum value maps for ReviewState.
var (
	ReviewState_name = map[int32]string{
		0: "REVIEW_STATE_UNSPECIFIED",
		1: "APPROVED",
		2: "CHANGES_REQUESTED",
		3: "COMMENTED",
	}
	ReviewState_value = map[string]int32{
		"REVIEW_STATE_UNSPECIFIED": 0,
		"APPROVED":                 1,
		"CHANGES_REQUESTED":        2,
		"COMMENTED":                3,
	}
)

func (x ReviewState) Enum() *ReviewState {
	p := new(ReviewState)
	*p = x
	return p
}

func (x ReviewState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewState) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[1].Descriptor()
}

func (ReviewState) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[1]
}

func (x ReviewState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewState.Descriptor instead.
func (ReviewState) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

type IssueCloseReason int32

const (
	IssueCloseReason_ISSUE_CLOSE_REASON_UNSPECIFIED IssueCloseReason = 0
	IssueCloseReason_COMPLETED                      IssueCloseReason = 1
	IssueCloseReason_NOT_PLANNED                    IssueCloseReason = 2 // Won't fix, duplicate, etc.
	IssueCloseReason_REOPENED                       IssueCloseReason = 3
)

// Enum value maps for IssueCloseReason.
var (
	IssueCloseReason_name = map[int32]string{
		0: "ISSUE_CLOSE_REASON_UNSPECIFIED",
		1: "COMPLETED",
		2: "NOT_PLANNED",
		3: "REOPENED",
	}
	IssueCloseReason_value = map[string]int32{
		"ISSUE_CLOSE_REASON_UNSPECIFIED": 0,
		"COMPLETED":                      1,
		"NOT_PLANNED":                    2,
		"REOPENED":                       3,
	}
)

func (x IssueCloseReason) Enum() *IssueCloseReason {
	p := new(IssueCloseReason)
	*p = x
	return p
}

func (x IssueCloseReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueCloseReason) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[2].Descriptor()
}

func (IssueCloseReason) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[2]
}

func (x IssueCloseReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueCloseReason.Descriptor instead.
func (IssueCloseReason) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

type PrCloseReason int32

const (
	PrCloseReason_PR_CLOSE_REASON_UNSPECIFIED PrCloseReason = 0
	PrCloseReason_MERGED                      PrCloseReason = 1
	PrCloseReason_CLOSED_WITHOUT_MERGE        PrCloseReason = 2
	PrCloseReason_DRAFT_CONVERTED             PrCloseReason = 3
)

// Enum value maps for PrCloseReason.
var (
	PrCloseReason_name = map[int32]string{
		0: "PR_CLOSE_REASON_UNSPECIFIED",
		1: "MERGED",
		2: "CLOSED_WITHOUT_MERGE",
		3: "DRAFT_CONVERTED",
	}
	PrCloseReason_value = map[string]int32{
		"PR_CLOSE_REASON_UNSPECIFIED": 0,
		"MERGED":                      1,
		"CLOSED_WITHOUT_MERGE":        2,
		"DRAFT_CONVERTED":             3,
	}
)

func (x PrCloseReason) Enum() *PrCloseReason {
	p := new(PrCloseReason)
	*p = x
	return p
}

func (x PrCloseReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrCloseReason) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[3].Descriptor()
}

func (PrCloseReason) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[3]
}

func (x PrCloseReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrCloseReason.Descriptor instead.
func (PrCloseReason) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

type Event struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventName      EventName              `protobuf:"varint,2,opt,name=event_name,json=eventName,proto3,enum=event.EventName" json:"event_name,omitempty"`
	Time           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	RepositoryId   string                 `protobuf:"bytes,4,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	RepositoryName string                 `protobuf:"bytes,5,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Event_PrOpenedPayload
	//	*Event_PrClosedPayload
	//	*Event_PrReviewPayload
	//	*Event_IssueOpenedPayload
	//	*Event_IssueClosedPayload
	//	*Event_IssueCommentedPayload
	//	*Event_PushPayload
	//	*Event_RepoForkedPayload
	Payload       isEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetEventName() EventName {
	if x != nil {
		return x.EventName
	}
	return EventName_EVENT_NAME_UNSPECIFIED
}

func (x *Event) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Event) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *Event) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *Event) GetPayload() isEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Event) GetPrOpenedPayload() *PullRequestOpenedPayload {
	if x != nil {
		if x, ok := x.Payload.(*Event_PrOpenedPayload); ok {
			return x.PrOpenedPayload
		}
	}
	return nil
}

func (x *Event) GetPrClosedPayload() *PullRequestClosedPayload {
	if x != nil {
		if x, ok := x.Payload.(*Event_PrClosedPayload); ok {
			return x.PrClosedPayload
		}
	}
	return nil
}

func (x *Event) GetPrReviewPayload() *PullRequestReviewSubmittedPayload {
	if x != nil {
		if x, ok := x.Payload.(*Event_PrReviewPayload); ok {
			return x.PrReviewPayload
		}
	}
	return nil
}

func (x *Event) GetIssueOpenedPayload() *IssueOpenedPayload {
	if x != nil {
		if x, ok := x.Payload.(*Event_IssueOpenedPayload); ok {
			return x.IssueOpenedPayload
		}
	}
	return nil
}

func (x *Event) GetIssueClosedPayload() *IssueClosedPayload {
	if x != nil {
		if x, ok := x.Payload.(*Event_IssueClosedPayload); ok {
			return x.IssueClosedPayload
		}
	}
	return nil
}

func (x *Event) GetIssueCommentedPayload() *IssueCommentedPayload {
	if x != nil {
		if x, ok := x.Payload.(*Event_IssueCommentedPayload); ok {
			return x.IssueCommentedPayload
		}
	}
	return nil
}

func (x *Event) GetPushPayload() *PushPayload {
	if x != nil {
		if x, ok := x.Payload.(*Event_PushPayload); ok {
			return x.PushPayload
		}
	}
	return nil
}

func (x *Event) GetRepoForkedPayload() *RepositoryForkedPayload {
	if x != nil {
		if x, ok := x.Payload.(*Event_RepoForkedPayload); ok {
			return x.RepoForkedPayload
		}
	}
	return nil
}

type isEvent_Payload interface {
	isEvent_Payload()
}

type Event_PrOpenedPayload struct {
	PrOpenedPayload *PullRequestOpenedPayload `protobuf:"bytes,100,opt,name=pr_opened_payload,json=prOpenedPayload,proto3,oneof"`
}

type Event_PrClosedPayload struct {
	PrClosedPayload *PullRequestClosedPayload `protobuf:"bytes,101,opt,name=pr_closed_payload,json=prClosedPayload,proto3,oneof"`
}

type Event_PrReviewPayload struct {
	PrReviewPayload *PullRequestReviewSubmittedPayload `protobuf:"bytes,102,opt,name=pr_review_payload,json=prReviewPayload,proto3,oneof"`
}

type Event_IssueOpenedPayload struct {
	IssueOpenedPayload *IssueOpenedPayload `protobuf:"bytes,103,opt,name=issue_opened_payload,json=issueOpenedPayload,proto3,oneof"`
}

type Event_IssueClosedPayload struct {
	IssueClosedPayload *IssueClosedPayload `protobuf:"bytes,104,opt,name=issue_closed_payload,json=issueClosedPayload,proto3,oneof"`
}

type Event_IssueCommentedPayload struct {
	IssueCommentedPayload *IssueCommentedPayload `protobuf:"bytes,105,opt,name=issue_commented_payload,json=issueCommentedPayload,proto3,oneof"`
}

type Event_PushPayload struct {
	PushPayload *PushPayload `protobuf:"bytes,106,opt,name=push_payload,json=pushPayload,proto3,oneof"`
}

type Event_RepoForkedPayload struct {
	RepoForkedPayload *RepositoryForkedPayload `protobuf:"bytes,107,opt,name=repo_forked_payload,json=repoForkedPayload,proto3,oneof"`
}

func (*Event_PrOpenedPayload) isEvent_Payload() {}

func (*Event_PrClosedPayload) isEvent_Payload() {}

func (*Event_PrReviewPayload) isEvent_Payload() {}

func (*Event_IssueOpenedPayload) isEvent_Payload() {}

func (*Event_IssueClosedPayload) isEvent_Payload() {}

func (*Event_IssueCommentedPayload) isEvent_Payload() {}

func (*Event_PushPayload) isEvent_Payload() {}

func (*Event_RepoForkedPayload) isEvent_Payload() {}

type PullRequestOpenedPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProjectId     string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PrNumber      string                 `protobuf:"bytes,3,opt,name=pr_number,json=prNumber,proto3" json:"pr_number,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	BranchName    string                 `protobuf:"bytes,5,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	TargetBranch  string                 `protobuf:"bytes,6,opt,name=target_branch,json=targetBranch,proto3" json:"target_branch,omitempty"`
	IsDraft       bool                   `protobuf:"varint,7,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	Labels        []string               `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
	Deadline      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=deadline,proto3" json:"deadline,omitempty"` //  int32 estimated_lines_changed = 10;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullRequestOpenedPayload) Reset() {
	*x = PullRequestOpenedPayload{}
	mi := &file_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRequestOpenedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestOpenedPayload) ProtoMessage() {}

func (x *PullRequestOpenedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestOpenedPayload.ProtoReflect.Descriptor instead.
func (*PullRequestOpenedPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *PullRequestOpenedPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PullRequestOpenedPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PullRequestOpenedPayload) GetPrNumber() string {
	if x != nil {
		return x.PrNumber
	}
	return ""
}

func (x *PullRequestOpenedPayload) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PullRequestOpenedPayload) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *PullRequestOpenedPayload) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *PullRequestOpenedPayload) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

func (x *PullRequestOpenedPayload) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PullRequestOpenedPayload) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type PullRequestClosedPayload struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	UserId       string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // PR author
	MergerUserId string                 `protobuf:"bytes,2,opt,name=merger_user_id,json=mergerUserId,proto3" json:"merger_user_id,omitempty"` // Person who merged (same as user_id if not merged)
	ProjectId    string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PrNumber     string                 `protobuf:"bytes,4,opt,name=pr_number,json=prNumber,proto3" json:"pr_number,omitempty"`
	CloseReason  PrCloseReason          `protobuf:"varint,5,opt,name=close_reason,json=closeReason,proto3,enum=event.PrCloseReason" json:"close_reason,omitempty"`
	Merged       bool                   `protobuf:"varint,6,opt,name=merged,proto3" json:"merged,omitempty"` // Primary indicator: was this merged?
	Additions    int32                  `protobuf:"varint,7,opt,name=additions,proto3" json:"additions,omitempty"`
	Deletions    int32                  `protobuf:"varint,8,opt,name=deletions,proto3" json:"deletions,omitempty"`
	FilesChanged int32                  `protobuf:"varint,9,opt,name=files_changed,json=filesChanged,proto3" json:"files_changed,omitempty"`
	CommitsCount int32                  `protobuf:"varint,10,opt,name=commits_count,json=commitsCount,proto3" json:"commits_count,omitempty"`
	Deadline     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=deadline,proto3" json:"deadline,omitempty"`
	MetDeadline  bool                   `protobuf:"varint,12,opt,name=met_deadline,json=metDeadline,proto3" json:"met_deadline,omitempty"`
	Labels       []string               `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty"`
	TargetBranch string                 `protobuf:"bytes,14,opt,name=target_branch,json=targetBranch,proto3" json:"target_branch,omitempty"`
	// Documentation-specific fields (zero values if not a doc PR)
	IsDocumentation    bool     `protobuf:"varint,15,opt,name=is_documentation,json=isDocumentation,proto3" json:"is_documentation,omitempty"`         // Is this a documentation PR?
	DocumentationTypes []string `protobuf:"bytes,16,rep,name=documentation_types,json=documentationTypes,proto3" json:"documentation_types,omitempty"` // ["README", "API Documentation", etc.]
	IsTranslation      bool     `protobuf:"varint,17,opt,name=is_translation,json=isTranslation,proto3" json:"is_translation,omitempty"`               // Is this a translation PR?
	Language           string   `protobuf:"bytes,18,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PullRequestClosedPayload) Reset() {
	*x = PullRequestClosedPayload{}
	mi := &file_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRequestClosedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestClosedPayload) ProtoMessage() {}

func (x *PullRequestClosedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestClosedPayload.ProtoReflect.Descriptor instead.
func (*PullRequestClosedPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *PullRequestClosedPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PullRequestClosedPayload) GetMergerUserId() string {
	if x != nil {
		return x.MergerUserId
	}
	return ""
}

func (x *PullRequestClosedPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PullRequestClosedPayload) GetPrNumber() string {
	if x != nil {
		return x.PrNumber
	}
	return ""
}

func (x *PullRequestClosedPayload) GetCloseReason() PrCloseReason {
	if x != nil {
		return x.CloseReason
	}
	return PrCloseReason_PR_CLOSE_REASON_UNSPECIFIED
}

func (x *PullRequestClosedPayload) GetMerged() bool {
	if x != nil {
		return x.Merged
	}
	return false
}

func (x *PullRequestClosedPayload) GetAdditions() int32 {
	if x != nil {
		return x.Additions
	}
	return 0
}

func (x *PullRequestClosedPayload) GetDeletions() int32 {
	if x != nil {
		return x.Deletions
	}
	return 0
}

func (x *PullRequestClosedPayload) GetFilesChanged() int32 {
	if x != nil {
		return x.FilesChanged
	}
	return 0
}

func (x *PullRequestClosedPayload) GetCommitsCount() int32 {
	if x != nil {
		return x.CommitsCount
	}
	return 0
}

func (x *PullRequestClosedPayload) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *PullRequestClosedPayload) GetMetDeadline() bool {
	if x != nil {
		return x.MetDeadline
	}
	return false
}

func (x *PullRequestClosedPayload) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PullRequestClosedPayload) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *PullRequestClosedPayload) GetIsDocumentation() bool {
	if x != nil {
		return x.IsDocumentation
	}
	return false
}

func (x *PullRequestClosedPayload) GetDocumentationTypes() []string {
	if x != nil {
		return x.DocumentationTypes
	}
	return nil
}

func (x *PullRequestClosedPayload) GetIsTranslation() bool {
	if x != nil {
		return x.IsTranslation
	}
	return false
}

func (x *PullRequestClosedPayload) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type PullRequestReviewSubmittedPayload struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ReviewerUserId   string                 `protobuf:"bytes,1,opt,name=reviewer_user_id,json=reviewerUserId,proto3" json:"reviewer_user_id,omitempty"`
	PrAuthorUserId   string                 `protobuf:"bytes,2,opt,name=pr_author_user_id,json=prAuthorUserId,proto3" json:"pr_author_user_id,omitempty"`
	ProjectId        string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PrNumber         string                 `protobuf:"bytes,4,opt,name=pr_number,json=prNumber,proto3" json:"pr_number,omitempty"`
	State            ReviewState            `protobuf:"varint,5,opt,name=state,proto3,enum=event.ReviewState" json:"state,omitempty"`
	CommentsCount    int32                  `protobuf:"varint,6,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
	IsSecurityReview bool                   `protobuf:"varint,7,opt,name=is_security_review,json=isSecurityReview,proto3" json:"is_security_review,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PullRequestReviewSubmittedPayload) Reset() {
	*x = PullRequestReviewSubmittedPayload{}
	mi := &file_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRequestReviewSubmittedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestReviewSubmittedPayload) ProtoMessage() {}

func (x *PullRequestReviewSubmittedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestReviewSubmittedPayload.ProtoReflect.Descriptor instead.
func (*PullRequestReviewSubmittedPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *PullRequestReviewSubmittedPayload) GetReviewerUserId() string {
	if x != nil {
		return x.ReviewerUserId
	}
	return ""
}

func (x *PullRequestReviewSubmittedPayload) GetPrAuthorUserId() string {
	if x != nil {
		return x.PrAuthorUserId
	}
	return ""
}

func (x *PullRequestReviewSubmittedPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PullRequestReviewSubmittedPayload) GetPrNumber() string {
	if x != nil {
		return x.PrNumber
	}
	return ""
}

func (x *PullRequestReviewSubmittedPayload) GetState() ReviewState {
	if x != nil {
		return x.State
	}
	return ReviewState_REVIEW_STATE_UNSPECIFIED
}

func (x *PullRequestReviewSubmittedPayload) GetCommentsCount() int32 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *PullRequestReviewSubmittedPayload) GetIsSecurityReview() bool {
	if x != nil {
		return x.IsSecurityReview
	}
	return false
}

type IssueOpenedPayload struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	UserId               string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProjectId            string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	IssueNumber          string                 `protobuf:"bytes,3,opt,name=issue_number,json=issueNumber,proto3" json:"issue_number,omitempty"`
	Title                string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Labels               []string               `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	IsBugReport          bool                   `protobuf:"varint,6,opt,name=is_bug_report,json=isBugReport,proto3" json:"is_bug_report,omitempty"`
	IsFeatureRequest     bool                   `protobuf:"varint,7,opt,name=is_feature_request,json=isFeatureRequest,proto3" json:"is_feature_request,omitempty"`
	HasReproductionSteps bool                   `protobuf:"varint,8,opt,name=has_reproduction_steps,json=hasReproductionSteps,proto3" json:"has_reproduction_steps,omitempty"`
	BodyLength           int32                  `protobuf:"varint,9,opt,name=body_length,json=bodyLength,proto3" json:"body_length,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *IssueOpenedPayload) Reset() {
	*x = IssueOpenedPayload{}
	mi := &file_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueOpenedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueOpenedPayload) ProtoMessage() {}

func (x *IssueOpenedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueOpenedPayload.ProtoReflect.Descriptor instead.
func (*IssueOpenedPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *IssueOpenedPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IssueOpenedPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *IssueOpenedPayload) GetIssueNumber() string {
	if x != nil {
		return x.IssueNumber
	}
	return ""
}

func (x *IssueOpenedPayload) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IssueOpenedPayload) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *IssueOpenedPayload) GetIsBugReport() bool {
	if x != nil {
		return x.IsBugReport
	}
	return false
}

func (x *IssueOpenedPayload) GetIsFeatureRequest() bool {
	if x != nil {
		return x.IsFeatureRequest
	}
	return false
}

func (x *IssueOpenedPayload) GetHasReproductionSteps() bool {
	if x != nil {
		return x.HasReproductionSteps
	}
	return false
}

func (x *IssueOpenedPayload) GetBodyLength() int32 {
	if x != nil {
		return x.BodyLength
	}
	return 0
}

type IssueClosedPayload struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // Person who closed the issue
	IssueAuthorId   string                 `protobuf:"bytes,2,opt,name=issue_author_id,json=issueAuthorId,proto3" json:"issue_author_id,omitempty"` // Original issue author
	ProjectId       string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	IssueNumber     string                 `protobuf:"bytes,4,opt,name=issue_number,json=issueNumber,proto3" json:"issue_number,omitempty"`
	CloseReason     IssueCloseReason       `protobuf:"varint,5,opt,name=close_reason,json=closeReason,proto3,enum=event.IssueCloseReason" json:"close_reason,omitempty"`
	Labels          []string               `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	OpenedAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=opened_at,json=openedAt,proto3" json:"opened_at,omitempty"`
	CommentsCount   int32                  `protobuf:"varint,8,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
	ClosingPrNumber string                 `protobuf:"bytes,9,opt,name=closing_pr_number,json=closingPrNumber,proto3" json:"closing_pr_number,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IssueClosedPayload) Reset() {
	*x = IssueClosedPayload{}
	mi := &file_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueClosedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueClosedPayload) ProtoMessage() {}

func (x *IssueClosedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueClosedPayload.ProtoReflect.Descriptor instead.
func (*IssueClosedPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *IssueClosedPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IssueClosedPayload) GetIssueAuthorId() string {
	if x != nil {
		return x.IssueAuthorId
	}
	return ""
}

func (x *IssueClosedPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *IssueClosedPayload) GetIssueNumber() string {
	if x != nil {
		return x.IssueNumber
	}
	return ""
}

func (x *IssueClosedPayload) GetCloseReason() IssueCloseReason {
	if x != nil {
		return x.CloseReason
	}
	return IssueCloseReason_ISSUE_CLOSE_REASON_UNSPECIFIED
}

func (x *IssueClosedPayload) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *IssueClosedPayload) GetOpenedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenedAt
	}
	return nil
}

func (x *IssueClosedPayload) GetCommentsCount() int32 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *IssueClosedPayload) GetClosingPrNumber() string {
	if x != nil {
		return x.ClosingPrNumber
	}
	return ""
}

type IssueCommentedPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IssueAuthorId string                 `protobuf:"bytes,2,opt,name=issue_author_id,json=issueAuthorId,proto3" json:"issue_author_id,omitempty"`
	ProjectId     string                 `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	IssueNumber   string                 `protobuf:"bytes,4,opt,name=issue_number,json=issueNumber,proto3" json:"issue_number,omitempty"`
	CommentLength int32                  `protobuf:"varint,5,opt,name=comment_length,json=commentLength,proto3" json:"comment_length,omitempty"`
	ContainsCode  bool                   `protobuf:"varint,6,opt,name=contains_code,json=containsCode,proto3" json:"contains_code,omitempty"`
	IsSolution    bool                   `protobuf:"varint,7,opt,name=is_solution,json=isSolution,proto3" json:"is_solution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCommentedPayload) Reset() {
	*x = IssueCommentedPayload{}
	mi := &file_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCommentedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentedPayload) ProtoMessage() {}

func (x *IssueCommentedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentedPayload.ProtoReflect.Descriptor instead.
func (*IssueCommentedPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *IssueCommentedPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IssueCommentedPayload) GetIssueAuthorId() string {
	if x != nil {
		return x.IssueAuthorId
	}
	return ""
}

func (x *IssueCommentedPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *IssueCommentedPayload) GetIssueNumber() string {
	if x != nil {
		return x.IssueNumber
	}
	return ""
}

func (x *IssueCommentedPayload) GetCommentLength() int32 {
	if x != nil {
		return x.CommentLength
	}
	return 0
}

func (x *IssueCommentedPayload) GetContainsCode() bool {
	if x != nil {
		return x.ContainsCode
	}
	return false
}

func (x *IssueCommentedPayload) GetIsSolution() bool {
	if x != nil {
		return x.IsSolution
	}
	return false
}

type PushPayload struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProjectId      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchName     string                 `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	IsMainBranch   bool                   `protobuf:"varint,4,opt,name=is_main_branch,json=isMainBranch,proto3" json:"is_main_branch,omitempty"`
	CommitsCount   int32                  `protobuf:"varint,5,opt,name=commits_count,json=commitsCount,proto3" json:"commits_count,omitempty"`
	Commits        []*CommitInfo          `protobuf:"bytes,6,rep,name=commits,proto3" json:"commits,omitempty"`
	TotalAdditions int32                  `protobuf:"varint,7,opt,name=total_additions,json=totalAdditions,proto3" json:"total_additions,omitempty"`
	TotalDeletions int32                  `protobuf:"varint,8,opt,name=total_deletions,json=totalDeletions,proto3" json:"total_deletions,omitempty"`
	FilesChanged   int32                  `protobuf:"varint,9,opt,name=files_changed,json=filesChanged,proto3" json:"files_changed,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PushPayload) Reset() {
	*x = PushPayload{}
	mi := &file_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushPayload) ProtoMessage() {}

func (x *PushPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushPayload.ProtoReflect.Descriptor instead.
func (*PushPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7}
}

func (x *PushPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PushPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PushPayload) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *PushPayload) GetIsMainBranch() bool {
	if x != nil {
		return x.IsMainBranch
	}
	return false
}

func (x *PushPayload) GetCommitsCount() int32 {
	if x != nil {
		return x.CommitsCount
	}
	return 0
}

func (x *PushPayload) GetCommits() []*CommitInfo {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *PushPayload) GetTotalAdditions() int32 {
	if x != nil {
		return x.TotalAdditions
	}
	return 0
}

func (x *PushPayload) GetTotalDeletions() int32 {
	if x != nil {
		return x.TotalDeletions
	}
	return 0
}

func (x *PushPayload) GetFilesChanged() int32 {
	if x != nil {
		return x.FilesChanged
	}
	return 0
}

type CommitInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Sha               string                 `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Message           string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Additions         int32                  `protobuf:"varint,3,opt,name=additions,proto3" json:"additions,omitempty"`
	Deletions         int32                  `protobuf:"varint,4,opt,name=deletions,proto3" json:"deletions,omitempty"`
	FilesChanged      int32                  `protobuf:"varint,5,opt,name=files_changed,json=filesChanged,proto3" json:"files_changed,omitempty"`
	IsMergeCommit     bool                   `protobuf:"varint,6,opt,name=is_merge_commit,json=isMergeCommit,proto3" json:"is_merge_commit,omitempty"`
	ModifiedFileTypes []string               `protobuf:"bytes,7,rep,name=modified_file_types,json=modifiedFileTypes,proto3" json:"modified_file_types,omitempty"` // .go, .md, .yaml, etc.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CommitInfo) Reset() {
	*x = CommitInfo{}
	mi := &file_event_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitInfo) ProtoMessage() {}

func (x *CommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitInfo.ProtoReflect.Descriptor instead.
func (*CommitInfo) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{8}
}

func (x *CommitInfo) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *CommitInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommitInfo) GetAdditions() int32 {
	if x != nil {
		return x.Additions
	}
	return 0
}

func (x *CommitInfo) GetDeletions() int32 {
	if x != nil {
		return x.Deletions
	}
	return 0
}

func (x *CommitInfo) GetFilesChanged() int32 {
	if x != nil {
		return x.FilesChanged
	}
	return 0
}

func (x *CommitInfo) GetIsMergeCommit() bool {
	if x != nil {
		return x.IsMergeCommit
	}
	return false
}

func (x *CommitInfo) GetModifiedFileTypes() []string {
	if x != nil {
		return x.ModifiedFileTypes
	}
	return nil
}

type RepositoryForkedPayload struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProjectId        string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ForkRepositoryId string                 `protobuf:"bytes,3,opt,name=fork_repository_id,json=forkRepositoryId,proto3" json:"fork_repository_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RepositoryForkedPayload) Reset() {
	*x = RepositoryForkedPayload{}
	mi := &file_event_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryForkedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryForkedPayload) ProtoMessage() {}

func (x *RepositoryForkedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryForkedPayload.ProtoReflect.Descriptor instead.
func (*RepositoryForkedPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9}
}

func (x *RepositoryForkedPayload) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RepositoryForkedPayload) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RepositoryForkedPayload) GetForkRepositoryId() string {
	if x != nil {
		return x.ForkRepositoryId
	}
	return ""
}

var File_event_proto protoreflect.FileDescriptor

const file_event_proto_rawDesc = "" +
	"\n" +
	"\vevent.proto\x12\x05event\x1a\x1fgoogle/protobuf/timestamp.proto\"\xc8\x06\n" +
	"\x05Event\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12/\n" +
	"\n" +
	"event_name\x18\x02 \x01(\x0e2\x10.event.EventNameR\teventName\x12.\n" +
	"\x04time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12#\n" +
	"\rrepository_id\x18\x04 \x01(\tR\frepositoryId\x12'\n" +
	"\x0frepository_name\x18\x05 \x01(\tR\x0erepositoryName\x12M\n" +
	"\x11pr_opened_payload\x18d \x01(\v2\x1f.event.PullRequestOpenedPayloadH\x00R\x0fprOpenedPayload\x12M\n" +
	"\x11pr_closed_payload\x18e \x01(\v2\x1f.event.PullRequestClosedPayloadH\x00R\x0fprClosedPayload\x12V\n" +
	"\x11pr_review_payload\x18f \x01(\v2(.event.PullRequestReviewSubmittedPayloadH\x00R\x0fprReviewPayload\x12M\n" +
	"\x14issue_opened_payload\x18g \x01(\v2\x19.event.IssueOpenedPayloadH\x00R\x12issueOpenedPayload\x12M\n" +
	"\x14issue_closed_payload\x18h \x01(\v2\x19.event.IssueClosedPayloadH\x00R\x12issueClosedPayload\x12V\n" +
	"\x17issue_commented_payload\x18i \x01(\v2\x1c.event.IssueCommentedPayloadH\x00R\x15issueCommentedPayload\x127\n" +
	"\fpush_payload\x18j \x01(\v2\x12.event.PushPayloadH\x00R\vpushPayload\x12P\n" +
	"\x13repo_forked_payload\x18k \x01(\v2\x1e.event.RepositoryForkedPayloadH\x00R\x11repoForkedPayloadB\t\n" +
	"\apayload\"\xb6\x02\n" +
	"\x18PullRequestOpenedPayload\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12\x1b\n" +
	"\tpr_number\x18\x03 \x01(\tR\bprNumber\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12\x1f\n" +
	"\vbranch_name\x18\x05 \x01(\tR\n" +
	"branchName\x12#\n" +
	"\rtarget_branch\x18\x06 \x01(\tR\ftargetBranch\x12\x19\n" +
	"\bis_draft\x18\a \x01(\bR\aisDraft\x12\x16\n" +
	"\x06labels\x18\b \x03(\tR\x06labels\x126\n" +
	"\bdeadline\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\bdeadline\"\xa3\x05\n" +
	"\x18PullRequestClosedPayload\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12$\n" +
	"\x0emerger_user_id\x18\x02 \x01(\tR\fmergerUserId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12\x1b\n" +
	"\tpr_number\x18\x04 \x01(\tR\bprNumber\x127\n" +
	"\fclose_reason\x18\x05 \x01(\x0e2\x14.event.PrCloseReasonR\vcloseReason\x12\x16\n" +
	"\x06merged\x18\x06 \x01(\bR\x06merged\x12\x1c\n" +
	"\tadditions\x18\a \x01(\x05R\tadditions\x12\x1c\n" +
	"\tdeletions\x18\b \x01(\x05R\tdeletions\x12#\n" +
	"\rfiles_changed\x18\t \x01(\x05R\ffilesChanged\x12#\n" +
	"\rcommits_count\x18\n" +
	" \x01(\x05R\fcommitsCount\x126\n" +
	"\bdeadline\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\bdeadline\x12!\n" +
	"\fmet_deadline\x18\f \x01(\bR\vmetDeadline\x12\x16\n" +
	"\x06labels\x18\r \x03(\tR\x06labels\x12#\n" +
	"\rtarget_branch\x18\x0e \x01(\tR\ftargetBranch\x12)\n" +
	"\x10is_documentation\x18\x0f \x01(\bR\x0fisDocumentation\x12/\n" +
	"\x13documentation_types\x18\x10 \x03(\tR\x12documentationTypes\x12%\n" +
	"\x0eis_translation\x18\x11 \x01(\bR\risTranslation\x12\x1a\n" +
	"\blanguage\x18\x12 \x01(\tR\blanguage\"\xb3\x02\n" +
	"!PullRequestReviewSubmittedPayload\x12(\n" +
	"\x10reviewer_user_id\x18\x01 \x01(\tR\x0ereviewerUserId\x12)\n" +
	"\x11pr_author_user_id\x18\x02 \x01(\tR\x0eprAuthorUserId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12\x1b\n" +
	"\tpr_number\x18\x04 \x01(\tR\bprNumber\x12(\n" +
	"\x05state\x18\x05 \x01(\x0e2\x12.event.ReviewStateR\x05state\x12%\n" +
	"\x0ecomments_count\x18\x06 \x01(\x05R\rcommentsCount\x12,\n" +
	"\x12is_security_review\x18\a \x01(\bR\x10isSecurityReview\"\xc6\x02\n" +
	"\x12IssueOpenedPayload\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12!\n" +
	"\fissue_number\x18\x03 \x01(\tR\vissueNumber\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12\x16\n" +
	"\x06labels\x18\x05 \x03(\tR\x06labels\x12\"\n" +
	"\ris_bug_report\x18\x06 \x01(\bR\visBugReport\x12,\n" +
	"\x12is_feature_request\x18\a \x01(\bR\x10isFeatureRequest\x124\n" +
	"\x16has_reproduction_steps\x18\b \x01(\bR\x14hasReproductionSteps\x12\x1f\n" +
	"\vbody_length\x18\t \x01(\x05R\n" +
	"bodyLength\"\xf7\x02\n" +
	"\x12IssueClosedPayload\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12&\n" +
	"\x0fissue_author_id\x18\x02 \x01(\tR\rissueAuthorId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12!\n" +
	"\fissue_number\x18\x04 \x01(\tR\vissueNumber\x12:\n" +
	"\fclose_reason\x18\x05 \x01(\x0e2\x17.event.IssueCloseReasonR\vcloseReason\x12\x16\n" +
	"\x06labels\x18\x06 \x03(\tR\x06labels\x127\n" +
	"\topened_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\bopenedAt\x12%\n" +
	"\x0ecomments_count\x18\b \x01(\x05R\rcommentsCount\x12*\n" +
	"\x11closing_pr_number\x18\t \x01(\tR\x0fclosingPrNumber\"\x87\x02\n" +
	"\x15IssueCommentedPayload\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12&\n" +
	"\x0fissue_author_id\x18\x02 \x01(\tR\rissueAuthorId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\tR\tprojectId\x12!\n" +
	"\fissue_number\x18\x04 \x01(\tR\vissueNumber\x12%\n" +
	"\x0ecomment_length\x18\x05 \x01(\x05R\rcommentLength\x12#\n" +
	"\rcontains_code\x18\x06 \x01(\bR\fcontainsCode\x12\x1f\n" +
	"\vis_solution\x18\a \x01(\bR\n" +
	"isSolution\"\xd5\x02\n" +
	"\vPushPayload\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12\x1f\n" +
	"\vbranch_name\x18\x03 \x01(\tR\n" +
	"branchName\x12$\n" +
	"\x0eis_main_branch\x18\x04 \x01(\bR\fisMainBranch\x12#\n" +
	"\rcommits_count\x18\x05 \x01(\x05R\fcommitsCount\x12+\n" +
	"\acommits\x18\x06 \x03(\v2\x11.event.CommitInfoR\acommits\x12'\n" +
	"\x0ftotal_additions\x18\a \x01(\x05R\x0etotalAdditions\x12'\n" +
	"\x0ftotal_deletions\x18\b \x01(\x05R\x0etotalDeletions\x12#\n" +
	"\rfiles_changed\x18\t \x01(\x05R\ffilesChanged\"\xf1\x01\n" +
	"\n" +
	"CommitInfo\x12\x10\n" +
	"\x03sha\x18\x01 \x01(\tR\x03sha\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\tadditions\x18\x03 \x01(\x05R\tadditions\x12\x1c\n" +
	"\tdeletions\x18\x04 \x01(\x05R\tdeletions\x12#\n" +
	"\rfiles_changed\x18\x05 \x01(\x05R\ffilesChanged\x12&\n" +
	"\x0fis_merge_commit\x18\x06 \x01(\bR\risMergeCommit\x12.\n" +
	"\x13modified_file_types\x18\a \x03(\tR\x11modifiedFileTypes\"\x7f\n" +
	"\x17RepositoryForkedPayload\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12,\n" +
	"\x12fork_repository_id\x18\x03 \x01(\tR\x10forkRepositoryId*\xdf\x01\n" +
	"\tEventName\x12\x1a\n" +
	"\x16EVENT_NAME_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13PULL_REQUEST_OPENED\x10\x01\x12\x17\n" +
	"\x13PULL_REQUEST_CLOSED\x10\x02\x12!\n" +
	"\x1dPULL_REQUEST_REVIEW_SUBMITTED\x10\x03\x12\x10\n" +
	"\fISSUE_OPENED\x10\x04\x12\x10\n" +
	"\fISSUE_CLOSED\x10\x05\x12\x13\n" +
	"\x0fISSUE_COMMENTED\x10\x06\x12\x11\n" +
	"\rCOMMIT_PUSHED\x10\a\x12\x15\n" +
	"\x11REPOSITORY_FORKED\x10\b*_\n" +
	"\vReviewState\x12\x1c\n" +
	"\x18REVIEW_STATE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bAPPROVED\x10\x01\x12\x15\n" +
	"\x11CHANGES_REQUESTED\x10\x02\x12\r\n" +
	"\tCOMMENTED\x10\x03*d\n" +
	"\x10IssueCloseReason\x12\"\n" +
	"\x1eISSUE_CLOSE_REASON_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tCOMPLETED\x10\x01\x12\x0f\n" +
	"\vNOT_PLANNED\x10\x02\x12\f\n" +
	"\bREOPENED\x10\x03*k\n" +
	"\rPrCloseReason\x12\x1f\n" +
	"\x1bPR_CLOSE_REASON_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06MERGED\x10\x01\x12\x18\n" +
	"\x14CLOSED_WITHOUT_MERGE\x10\x02\x12\x13\n" +
	"\x0fDRAFT_CONVERTED\x10\x03B\x19Z\x17protobuf/golang/eventpbb\x06proto3"

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData []byte
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)))
	})
	return file_event_proto_rawDescData
}

var file_event_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_event_proto_goTypes = []any{
	(EventName)(0),                            // 0: event.EventName
	(ReviewState)(0),                          // 1: event.ReviewState
	(IssueCloseReason)(0),                     // 2: event.IssueCloseReason
	(PrCloseReason)(0),                        // 3: event.PrCloseReason
	(*Event)(nil),                             // 4: event.Event
	(*PullRequestOpenedPayload)(nil),          // 5: event.PullRequestOpenedPayload
	(*PullRequestClosedPayload)(nil),          // 6: event.PullRequestClosedPayload
	(*PullRequestReviewSubmittedPayload)(nil), // 7: event.PullRequestReviewSubmittedPayload
	(*IssueOpenedPayload)(nil),                // 8: event.IssueOpenedPayload
	(*IssueClosedPayload)(nil),                // 9: event.IssueClosedPayload
	(*IssueCommentedPayload)(nil),             // 10: event.IssueCommentedPayload
	(*PushPayload)(nil),                       // 11: event.PushPayload
	(*CommitInfo)(nil),                        // 12: event.CommitInfo
	(*RepositoryForkedPayload)(nil),           // 13: event.RepositoryForkedPayload
	(*timestamppb.Timestamp)(nil),             // 14: google.protobuf.Timestamp
}
var file_event_proto_depIdxs = []int32{
	0,  // 0: event.Event.event_name:type_name -> event.EventName
	14, // 1: event.Event.time:type_name -> google.protobuf.Timestamp
	5,  // 2: event.Event.pr_opened_payload:type_name -> event.PullRequestOpenedPayload
	6,  // 3: event.Event.pr_closed_payload:type_name -> event.PullRequestClosedPayload
	7,  // 4: event.Event.pr_review_payload:type_name -> event.PullRequestReviewSubmittedPayload
	8,  // 5: event.Event.issue_opened_payload:type_name -> event.IssueOpenedPayload
	9,  // 6: event.Event.issue_closed_payload:type_name -> event.IssueClosedPayload
	10, // 7: event.Event.issue_commented_payload:type_name -> event.IssueCommentedPayload
	11, // 8: event.Event.push_payload:type_name -> event.PushPayload
	13, // 9: event.Event.repo_forked_payload:type_name -> event.RepositoryForkedPayload
	14, // 10: event.PullRequestOpenedPayload.deadline:type_name -> google.protobuf.Timestamp
	3,  // 11: event.PullRequestClosedPayload.close_reason:type_name -> event.PrCloseReason
	14, // 12: event.PullRequestClosedPayload.deadline:type_name -> google.protobuf.Timestamp
	1,  // 13: event.PullRequestReviewSubmittedPayload.state:type_name -> event.ReviewState
	2,  // 14: event.IssueClosedPayload.close_reason:type_name -> event.IssueCloseReason
	14, // 15: event.IssueClosedPayload.opened_at:type_name -> google.protobuf.Timestamp
	12, // 16: event.PushPayload.commits:type_name -> event.CommitInfo
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	file_event_proto_msgTypes[0].OneofWrappers = []any{
		(*Event_PrOpenedPayload)(nil),
		(*Event_PrClosedPayload)(nil),
		(*Event_PrReviewPayload)(nil),
		(*Event_IssueOpenedPayload)(nil),
		(*Event_IssueClosedPayload)(nil),
		(*Event_IssueCommentedPayload)(nil),
		(*Event_PushPayload)(nil),
		(*Event_RepoForkedPayload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		EnumInfos:         file_event_proto_enumTypes,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
