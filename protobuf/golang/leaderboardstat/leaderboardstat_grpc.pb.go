// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: protobuf/leaderboardstat/leaderboardstat.proto

package leaderboardstat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderboardStatServiceClient is the client API for LeaderboardStatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderboardStatServiceClient interface {
	GetContributorTotalStats(ctx context.Context, in *ContributorStatRequest, opts ...grpc.CallOption) (*ContributorStatResponse, error)
}

type leaderboardStatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardStatServiceClient(cc grpc.ClientConnInterface) LeaderboardStatServiceClient {
	return &leaderboardStatServiceClient{cc}
}

func (c *leaderboardStatServiceClient) GetContributorTotalStats(ctx context.Context, in *ContributorStatRequest, opts ...grpc.CallOption) (*ContributorStatResponse, error) {
	out := new(ContributorStatResponse)
	err := c.cc.Invoke(ctx, "/leaderboardstat.LeaderboardStatService/GetContributorTotalStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderboardStatServiceServer is the server API for LeaderboardStatService service.
// All implementations must embed UnimplementedLeaderboardStatServiceServer
// for forward compatibility
type LeaderboardStatServiceServer interface {
	GetContributorTotalStats(context.Context, *ContributorStatRequest) (*ContributorStatResponse, error)
	mustEmbedUnimplementedLeaderboardStatServiceServer()
}

// UnimplementedLeaderboardStatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderboardStatServiceServer struct {
}

func (UnimplementedLeaderboardStatServiceServer) GetContributorTotalStats(context.Context, *ContributorStatRequest) (*ContributorStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContributorTotalStats not implemented")
}
func (UnimplementedLeaderboardStatServiceServer) mustEmbedUnimplementedLeaderboardStatServiceServer() {
}

// UnsafeLeaderboardStatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardStatServiceServer will
// result in compilation errors.
type UnsafeLeaderboardStatServiceServer interface {
	mustEmbedUnimplementedLeaderboardStatServiceServer()
}

func RegisterLeaderboardStatServiceServer(s grpc.ServiceRegistrar, srv LeaderboardStatServiceServer) {
	s.RegisterService(&LeaderboardStatService_ServiceDesc, srv)
}

func _LeaderboardStatService_GetContributorTotalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContributorStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardStatServiceServer).GetContributorTotalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboardstat.LeaderboardStatService/GetContributorTotalStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardStatServiceServer).GetContributorTotalStats(ctx, req.(*ContributorStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderboardStatService_ServiceDesc is the grpc.ServiceDesc for LeaderboardStatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderboardStatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaderboardstat.LeaderboardStatService",
	HandlerType: (*LeaderboardStatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContributorTotalStats",
			Handler:    _LeaderboardStatService_GetContributorTotalStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/leaderboardstat/leaderboardstat.proto",
}
